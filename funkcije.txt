--Funkcija ki spremeni oddelek zaposlenemu
CREATE OR REPLACE FUNCTION spremeni_oddelek_zaposlenemu(za_id INTEGER, od_id INTEGER)
RETURNS VOID AS
$$
    BEGIN
        UPDATE oddelki_zaposleni
        SET oddelek_id = od_id
        WHERE zaposlen_id = za_id;
    end;
$$
LANGUAGE 'plpgsql';

--Funkcija za prijavo
CREATE FUNCTION prijava (username VARCHAR(100), password VARCHAR(100))
RETURNS int AS
$$
DECLARE x int;
BEGIN
    SELECT INTO x id FROM uporabniki WHERE uporabnisko_ime = username;
    IF (x IS NULL) THEN
        return 0;
    END IF;
    IF ((SELECT geslo FROM uporabniki WHERE id = x) = password) THEN
        return x;
    END IF;
END;
$$ LANGUAGE 'plpgsql';

--Example
SELECT prijava('zanluka', 'artic');

--prebere uporabnike
CREATE FUNCTION preberi_uporabnike ()
RETURNS TABLE(
            id integer,
            uporabinsko_ime character varying,
            geslo  character varying
        ) AS
$$
BEGIN
    RETURN QUERY(SELECT * FROM uporabniki);
END;
$$ LANGUAGE 'plpgsql';

--Example
SELECT preberi_uporabnike();

--dodaj zaposlenega

CREATE FUNCTION dodaj_zaposlenega (name VARCHAR(20), surname VARCHAR(30), kraj INTEGER, datum_r TIMESTAMP, telefon VARCHAR, mail VARCHAR(50))
RETURNS VOID AS
$$
BEGIN
    INSERT INTO zaposleni (ime, priimek, kraj_id, datum_rojstva, "telefonska_St", email)
    VALUES (name, surname, kraj, datum_r, telefon, mail);
END;
$$
LANGUAGE 'plpgsql';


--brisi uporabnika
CREATE FUNCTION brisi_uporabnika (user_id INTEGER)
RETURNS VOID AS
$$
BEGIN
    DELETE FROM uporabniki
    WHERE id = user_id;
END;
$$
LANGUAGE 'plpgsql';

DROP FUNCTION dodaj_zaposlenega;

--bere kraje
CREATE FUNCTION preberi_kraje ()
RETURNS TABLE(id integer, postna_st integer, naziv VARCHAR(100), veliki_uporabniki VARCHAR) AS
$$
BEGIN
    RETURN QUERY(SELECT * FROM kraji);
END;
$$
LANGUAGE 'plpgsql';

--doda kraj
CREATE FUNCTION dodaj_kraj (postna INTEGER, name VARCHAR(100), vel_u VARCHAR)
RETURNS VOID AS
$$
BEGIN
    INSERT INTO kraji (postna_st, naziv, veliki_uporabniki)
    VALUES (postna, name, vel_u);
END;
$$
LANGUAGE 'plpgsql';

--zbrise kraj
CREATE FUNCTION zbrisi_kraj (k_id INTEGER)
RETURNS VOID AS
$$
BEGIN
    UPDATE zaposleni
    SET kraj_id = NULL
    WHERE kraj_id=k_id;

    DELETE FROM kraji
    WHERE id=k_id;
END;
$$
LANGUAGE 'plpgsql';

--prebere oddelke
CREATE FUNCTION preberi_oddelke ()
RETURNS TABLE(id integer, ime VARCHAR(50)) AS
$$
BEGIN
    RETURN QUERY(SELECT * FROM oddelki);
END;
$$
LANGUAGE 'plpgsql';

--zbrise oddelek
CREATE FUNCTION zbrisi_oddelek (o_id INTEGER)
RETURNS VOID AS
$$
BEGIN
    DELETE from oddelki_zaposleni
    WHERE oddelek_id=o_id;

    DELETE FROM oddelki
    WHERE id=o_id;
END;
$$
LANGUAGE 'plpgsql';

--uredi oddelek
CREATE FUNCTION uredi_oddelek (id_check INTEGER, ime_new VARCHAR(50))
RETURNS VOID AS
$$
BEGIN
    UPDATE oddelki
    SET ime=ime_new
    WHERE id=id_check;
END;
$$
LANGUAGE 'plpgsql';

--doda oddelek
CREATE FUNCTION dodaj_oddelek (ime_add VARCHAR(50))
RETURNS VOID AS
$$
BEGIN
    INSERT INTO oddelki (ime)
    VALUES (ime_add);
END;
$$
LANGUAGE 'plpgsql';

--zaposleni log
CREATE TABLE arhiv_zaposlenih (LIKE zaposleni INCLUDING ALL);
ALTER TABLE arhiv_zaposlenih
ADD COLUMN datum_spremembe TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN zaposlen_id INTEGER NOT NULL;

CREATE OR REPLACE FUNCTION arhiviraj_zaposleni()
RETURNS TRIGGER AS $$
DECLARE
BEGIN
INSERT INTO arhiv_zaposlenih (ime, priimek, kraj_id, datum_rojstva, "telefonska_St", email, zaposlen_id)
VALUES (old.ime, old.priimek, old.kraj_id, old.datum_rojstva, old."telefonska_St", old.email, old.id);
RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER arhiv_zaposleni
BEFORE UPDATE OR DELETE
ON zaposleni
FOR EACH ROW EXECUTE PROCEDURE arhiviraj_zaposleni();