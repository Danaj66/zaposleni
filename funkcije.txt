--Funkcija ki kot parametre sprejme ime in priimek zaposlenega ter oddelek v katerega prihaja in spremeni oddelek zaposlenemu
CREATE FUNCTION spremeni_oddelek_zaposlenemu (zaposlen_priimek VARCHAR(100), zaposlen_ime VARCHAR(100), oddelek varchar)
RETURNS void AS 
$$
BEGIN 
    UPDATE oddelki_zaposleni SET oddelek_id = (SELECT id FROM oddelki WHERE ime LIKE oddelek), datum_prihoda = CURRENT_TIMESTAMP
    WHERE zaposlen_id IN (
        SELECT z.id
        FROM zaposleni z
        WHERE ((lower(z.priimek) = lower(zaposlen_priimek)) AND (lower(z.ime) = lower(zaposlen_ime)))
        );
END;
$$ LANGUAGE 'plpgsql';

--Example
SELECT spremeni_oddelek_zaposlenemu('Prešeren', 'France', 'Finančni oddelek');

--Funkcija za prijavo
CREATE FUNCTION prijava (username VARCHAR(100), password VARCHAR(100))
RETURNS int AS
$$
DECLARE x int;
BEGIN
    SELECT INTO x id FROM uporabniki WHERE uporabnisko_ime = username;
    IF (x IS NULL) THEN
        return 0;
    END IF;
    IF ((SELECT geslo FROM uporabniki WHERE id = x) = password) THEN
        return x;
    END IF;
END;
$$ LANGUAGE 'plpgsql';

--Example
SELECT prijava('zanluka', 'artic');

--prebere uporabnike
CREATE FUNCTION preberi_uporabnike ()
RETURNS TABLE(
            id integer,
            uporabinsko_ime character varying,
            geslo  character varying
        ) AS
$$
BEGIN
    RETURN QUERY(SELECT * FROM uporabniki);
END;
$$ LANGUAGE 'plpgsql';

--Example
SELECT preberi_uporabnike();

--dodaj zaposlenega

CREATE FUNCTION dodaj_zaposlenega (name VARCHAR(20), surname VARCHAR(30), kraj INTEGER, datum_r TIMESTAMP, telefon VARCHAR, mail VARCHAR(50))
RETURNS VOID AS
$$
BEGIN
    INSERT INTO zaposleni (ime, priimek, kraj_id, datum_rojstva, "telefonska_St", email)
    VALUES (name, surname, kraj, datum_r, telefon, mail);
END;
$$
LANGUAGE 'plpgsql';


--brisi uporabnika
CREATE FUNCTION brisi_uporabnika (user_id INTEGER)
RETURNS VOID AS
$$
BEGIN
    DELETE FROM uporabniki
    WHERE id = user_id;
END;
$$
LANGUAGE 'plpgsql';

DROP FUNCTION dodaj_zaposlenega;